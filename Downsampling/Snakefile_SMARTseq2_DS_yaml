from os import listdir
import yaml

#Path to sample fastq files
fastq_path = '/project/devel/HCA/Karolinska/SMARTseq2_final/'
human_gtf = '/project/devel/alafzi/ref_genomes/human/hsa_gencode.v28.annotation.gtf'
human_STAR_genome= '/project/devel/alafzi/ref_genomes/human/STARgenome'
mouse_gtf = '/project/devel/alafzi/ref_genomes/mouse/mmu_gencode.vM17.primary_assembly.annotation.gtf'
mouse_STAR_genome= '/project/devel/alafzi/ref_genomes/mouse/STARgenome'
mixed_gtf = '/project/devel/alafzi/ref_genomes/mixed/hsap_mmus_can_combined_gtf.gtf'
mixed_STAR_genome= '/project/devel/alafzi/ref_genomes/mixed/STARgenome'

zUMI_path='/apps/ZUMIS/29c776d'
#bc_list2= '/project/devel/HCA/10XGenomics/10X_cellBCs_737K-august-2016.txt'
protocol= 'SMARTseqFINAL'

#Loading modules
#shell.executable("!/usr/bin/env bash")
shell.prefix("module unload gcc/latest; module load gcc/6.3.0; module load XZ/5.2.2; module load COREUTILS/8.21; module load CONDA/4.3.11_PYTHON3; module load java/latest; module load SAMTOOLS/1.9; module load BAMTOOLS/2.3.0 ; module load STAR/2.6.0c; module load R/3.5.0; module load hdf5/1.10.1; module load PIGZ/2.3.3; module load ZUMIS/29c776d; ")

#Samples
sample_files = listdir(fastq_path)
SAMPLES = list(set(i.split("_")[1] for i in sample_files))


rule all:
    input:
        "multigenome_SMARTseqFINAL_DS_YAML/"+protocol+".hsap.full.SCE.jointDSmat.2.Robj"
        #expand("YAMLs/"+protocol+"_hsap_{sample}.yaml",sample=SAMPLES),
        #expand("YAMLs/"+protocol+"_DS_{sample}.yaml",sample=SAMPLES)
        #expand('multigenome_SMARTseqFINAL_DS_YAML/{sample}_human/'+protocol+'.aligned.sorted.bam', sample=SAMPLES)


rule create_yaml:
    input:
         yaml = "pipeline_SMARTseq2.yaml"
    output:
        yamlOut_DS="YAMLs/"+protocol+"_DS_{sample}.yaml"
    run:
        #fname = input

        stream = open(input.yaml, 'r')
        data_DS = yaml.load(stream)

        data_DS['project'] = protocol
        data_DS['sequence_files']['file1']['name'] = fastq_path+ 'SMARTseq_' + wildcards.sample +'_R1.fastq.gz'
        data_DS['sequence_files']['file1']['base_definition'][0] = 'cDNA(1-76)'
        data_DS['sequence_files']['file2']['name'] = fastq_path+ 'SMARTseq_' + wildcards.sample +'_R2.fastq.gz'
        data_DS['sequence_files']['file2']['base_definition'][0] = 'cDNA(1-76)'
        data_DS['sequence_files']['file3']['name'] = fastq_path+ 'SMARTseq_' + wildcards.sample +'_I1.fastq.gz'
        data_DS['sequence_files']['file3']['base_definition'][0] = 'BC(1-8)'
        #data_DS['sequence_files']['file3']['base_definition'][1] = 'UMI(1-8)'
        data_DS['sequence_files']['file4']['name'] = fastq_path+ 'SMARTseq_' + wildcards.sample +'_I2.fastq.gz'
        data_DS['sequence_files']['file4']['base_definition'][0] = 'BC(1-8)'
        data_DS['num_threads'] = 8
        #data_DS['mem_limit'] = 50
        data_DS['make_stats'] = "yes"
        #data_DS['which_Stage'] = 'Counting'
        #data_DS['barcodes']['barcode_file'] = bc_list2
        data_DS['barcodes']['barcode_num'] = 3000
        data_DS['counting_opts']['downsampling'] = '5000,10000,15000,20000,50000'
        data_DS['reference']['STAR_index'] = '/project/devel/alafzi/ref_genomes/human/STARgenome'
        data_DS['reference']['GTF_file'] = '/project/devel/alafzi/ref_genomes/human/hsa_gencode.v28.annotation.gtf'
        data_DS['reference']['additional_STAR_params'] = '--limitOutSJcollapsed 4000000 --limitSjdbInsertNsj 4000000'
        data_DS['out_dir'] = "/project/devel/alafzi/SC_Protocols/Downsampling/multigenome_SMARTseqFINAL_DS_YAML/"+wildcards.sample+"_human"
        with open(output.yamlOut_DS, 'w') as out_DS:
            yaml.dump(data_DS, out_DS, default_flow_style=False)

rule fix_yaml:
    input: 
        yamlin_DS= "YAMLs/"+protocol+"_DS_{sample}.yaml"
    output:
        yamlOutFix_DS="YAMLs_fixed/"+protocol+"_DS_{sample}_fixed.yaml"
    shell:
        """
       sed 's/make_stats: true/make_stats: yes/g' {input.yamlin_DS} > {output.yamlOutFix_DS}
       sed 's/downsampling: 5000,10000,15000,20000,50000/downsampling: "5000,10000,15000,20000,50000"/g' {input.yamlin_DS} > {output.yamlOutFix_DS}
 
       """
       

rule zUMI_run:
    input:
        yaml_DS="YAMLs_fixed/"+protocol + "_DS_{sample}_fixed.yaml"

    output:
        dir='multigenome_SMARTseqFINAL_DS_YAML/{sample}_human/'+protocol+'.filtered.tagged.Aligned.out.bam',
        dir_file11='multigenome_SMARTseqFINAL_DS_YAML/{sample}_human/'+protocol+'.BCstats.txt',
        dir_exp='multigenome_SMARTseqFINAL_DS_YAML/{sample}_human/zUMIs_output/expression/'+protocol+'.dgecounts.rds'

    shell:
        """
        cd multigenome_SMARTseqFINAL_DS_YAML/{wildcards.sample}_human
        bash {zUMI_path}/zUMIs-master.sh -y ../../{input.yaml_DS}
        cd ../..
       """
 
        
rule prepare_R_inputs:
    input:
        hsap_Exprs= expand('multigenome_SMARTseqFINAL_DS_YAML/{sample}_human/zUMIs_output/expression/'+protocol+'.dgecounts.rds',sample=SAMPLES)
    
    output:
        hsapExp_list="multigenome_SMARTseqFINAL_DS_YAML/"+protocol+'_Hsap_expression_DS_list.txt',
        #vcfs_list="multigenome_SMARTseqFINAL_DS_YAML/"+protocol+'_VCFs_list.txt'

    shell:
        """
        echo -e "{input.hsap_Exprs}" >> {output.hsapExp_list}
        """
rule R_wrapper:
    input:
        hE_list="multigenome_SMARTseqFINAL_DS_YAML/"+protocol+"_Hsap_expression_DS_list.txt"
    output:
        hsap_Robj= "multigenome_SMARTseqFINAL_DS_YAML/"+protocol+".hsap.full.SCE.jointDSmat.2.Robj"
    shell:
        "Rscript wrapper_Downsampled_Robj_SMARTseq2_hsap.R --hsapExp {input.hE_list} --output_SCEobj ./multigenome_SMARTseqFINAL_DS_YAML --technology SMARTseqFINAL"
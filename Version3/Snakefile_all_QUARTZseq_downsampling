from os import listdir

#Path to sample fastq files
fastq_path = '/project/devel/HCA/Riken/fastq_pool_merged'
human_gtf = '/project/devel/alafzi/ref_genomes/human/hsa_gencode.v28.annotation.gtf'
human_STAR_genome= '/project/devel/alafzi/ref_genomes/human/STARgenome'
mouse_gtf = '/project/devel/alafzi/ref_genomes/mouse/mmu_gencode.vM17.primary_assembly.annotation.gtf'
mouse_STAR_genome= '/project/devel/alafzi/ref_genomes/mouse/STARgenome'
mixed_gtf = '/project/devel/alafzi/ref_genomes/mixed/hsap_mmus_can_combined_gtf.gtf'
mixed_STAR_genome= '/project/devel/alafzi/ref_genomes/mixed/STARgenome'

zUMI_path='/apps/ZUMIS/0.0.6'
bc_list2= '/project/devel/HCA/Riken/QUARTZseq_cellBC.txt'
protocol= 'QUARTZseq'

#Loading modules
#shell.executable("!/usr/bin/env bash")
shell.prefix("module unload gcc/latest; module load gcc/6.3.0; module load XZ/5.2.2; module load CONDA/4.3.11_PYTHON3; module load java/latest; module load SAMTOOLS/1.6; module load BAMTOOLS/2.3.0 ; module load STAR/2.6.0c; module load R/3.5.0; module load hdf5/1.10.1; module load PIGZ/2.3.3; module load ZUMIS/0.0.6; ")

#Samples
sample_files = listdir(fastq_path)
SAMPLES = list(set(i.split("_")[0] for i in sample_files))
#SAMPLES = ["5568AA", "5571AA"]
#SAMPLES = SAMPLES[0]
SPECIES = ["human", "mouse", "mixed"]


rule all:
    input:
        "multigenome_QUARTZseq_DS/"+protocol+".hsap.full.SCE.Robj",
        "multigenome_QUARTZseq_DS/"+protocol+".mmus.full.SCE.Robj"
        #expand('multigenome_QUARTZseq_DS/{sample}_human/'+protocol+'.aligned.sorted.bam', sample=SAMPLES)


rule zUMI_run:
    input:
        fastq_R1=fastq_path+'/{sample}_1.fastq.gz',
        fastq_R2=fastq_path+'/{sample}_2.fastq.gz'
        #sample_id='{sample}'
    output:
        dir='multigenome_QUARTZseq_DS/{sample}_human/'+protocol+'.aligned.sorted.bam',
        dir_file11='multigenome_QUARTZseq_DS/{sample}_human/'+protocol+'.barcodelist.filtered.sort.sam',
        dir_exp='multigenome_QUARTZseq_DS/{sample}_human/zUMIs_output_downsampled/expression/'+protocol+'.dgecounts.rds'


    shell:
        """
        cd multigenome_QUARTZseq_DS/{wildcards.sample}_human
        rm -r zUMIs_output_downsampled
        bash {zUMI_path}/zUMIs-master.sh -f {input.fastq_R1} -r {input.fastq_R2} -c 1-15 -m 16-23 -l 62 -g {human_STAR_genome} -a {human_gtf} -n {protocol} -p 8 -b {bc_list2} -x '--limitOutSJcollapsed 4000000 --limitSjdbInsertNsj 4000000' -i {zUMI_path} -o .
        mv zUMIs_output zUMIs_output_main
        bash {zUMI_path}/zUMIs-master.sh -w Counting -f {input.fastq_R1} -r {input.fastq_R2} -c 1-15 -m 16-23 -l 62 -g {human_STAR_genome} -a {human_gtf} -n {protocol} -p 8 -b {bc_list2} -d 20000,5000,10000,15000 -x '--limitOutSJcollapsed 4000000 --limitSjdbInsertNsj 4000000' -i {zUMI_path} -o .
        mv zUMIs_output zUMIs_output_downsampled
        cd ../..
        """
    
        
# So far by zUMI_run rule, we would have STAR alignment bam files, as well as quantifications and everything!
# For the next step we want to demultiplex bam files of the mixed species

# This rule combines the aligned.sorted.bam with the barcode information from hca04.barcodelist.filtered.sort.sam ! Basically, I split the barcode sequence into tags that get added to the aligned bam file.
#So for each protocol I will need to adjust the ranges 
rule prepare_R_inputs:
    input:
        hsap_Exprs= expand('multigenome_QUARTZseq_DS/{sample}_human/zUMIs_output_downsampled/expression/'+protocol+'.dgecounts.rds',sample=SAMPLES)
    
    output:
        hsapExp_list="multigenome_QUARTZseq_DS/"+protocol+'_Hsap_expression_DS_list.txt',
        #vcfs_list="multigenome_QUARTZseq_DS/"+protocol+'_VCFs_list.txt'

    shell:
        """
        echo -e "{input.hsap_Exprs}" >> {output.hsapExp_list}
        """
rule R_wrapper:
    input:
        hE_list="multigenome_QUARTZseq_DS/"+protocol+"_Hsap_expression_list.txt"
    output:
        hsap_Robj= "multigenome_QUARTZseq_DS/"+protocol+".hsap.full.SCE.Robj",
        mmus_Robj= "multigenome_QUARTZseq_DS/"+protocol+".mmus.full.SCE.Robj"
    shell:
        "Rscript wrapper_Robj_V4_withoutDonor.R --hsapExp {input.hE_list} --mmusExp {input.mE_list} --hnReads {input.h_nR_list} --hnUMI {input.h_nU_list} --hnGene {input.h_nG_list} --hnFeatures {input.h_nF_list} --mnReads {input.m_nR_list} --mnUMI {input.m_nU_list} --mnGene {input.m_nG_list} --mnFeatures {input.m_nF_list} --species {input.spec_list} --output_SCEobj ./multigenome_QUARTZseq_DS --technology QUARTZseq"
from os import listdir
import yaml

#Path to sample fastq files
fastq_path = '/project/devel/HCA/Riken/fastq_pool_merged/'
human_gtf = '/project/devel/alafzi/ref_genomes/human/hsa_gencode.v28.annotation.gtf'
human_STAR_genome= '/project/devel/alafzi/ref_genomes/human/STARgenome'
mouse_gtf = '/project/devel/alafzi/ref_genomes/mouse/mmu_gencode.vM17.primary_assembly.annotation.gtf'
mouse_STAR_genome= '/project/devel/alafzi/ref_genomes/mouse/STARgenome'
mixed_gtf = '/project/devel/alafzi/ref_genomes/mixed/hsap_mmus_can_combined_gtf.gtf'
mixed_STAR_genome= '/project/devel/alafzi/ref_genomes/mixed/STARgenome'

zUMI_path='/apps/ZUMIS/2.2'
bc_list2= '/project/devel/HCA/Riken/QUARTZseq_cellBC.txt'
protocol= 'QUARTZseq'

#Loading modules
#shell.executable("!/usr/bin/env bash")
shell.prefix("module unload gcc/latest; module load gcc/6.3.0; module load XZ/5.2.2; module load COREUTILS/8.21; module load CONDA/4.3.11_PYTHON3; module load java/latest; module load SAMTOOLS/1.6; module load BAMTOOLS/2.3.0 ; module load STAR/2.6.0c; module load R/3.5.0; module load hdf5/1.10.1; module load PIGZ/2.3.3; module load ZUMIS/2.2; ")

#Samples
sample_files = listdir(fastq_path)
SAMPLES = list(set(i.split("_")[0] for i in sample_files))
#SAMPLES = ["5568AA", "5571AA"]
#SAMPLES = SAMPLES[0]
SPECIES = ["human", "mouse", "mixed"]


rule all:
    input:
        expand("YAMLs/"+protocol+"_hsap_{sample}.yaml",sample=SAMPLES),
        expand("YAMLs/"+protocol+"_DS_{sample}.yaml",sample=SAMPLES)
        #"multigenome_QUARTZseq_DS_YAML/"+protocol+".hsap.full.SCE.jointDSmat.Robj"
        #expand('multigenome_QUARTZseq_DS_YAML/{sample}_human/'+protocol+'.aligned.sorted.bam', sample=SAMPLES)


rule create_yaml:
    input:
         yaml = "pipeline_general.yaml"
    output:
        yamlOut_hsap="YAMLs/"+protocol+"_hsap_{sample}.yaml",
        yamlOut_DS="YAMLs/"+protocol+"_DS_{sample}.yaml"
    run:
        #fname = input

        stream = open(input.yaml, 'r')
        data_hsap = yaml.load(stream)

        data_hsap['project'] = protocol
        data_hsap['sequence_files']['file1']['name'] = fastq_path+ wildcards.sample +'_1.fastq.gz'
        data_hsap['sequence_files']['file1']['base_definition'][0] = 'BC(1-15)'
        data_hsap['sequence_files']['file1']['base_definition'][1] = 'UMI(16-23)'
        data_hsap['sequence_files']['file2']['name'] = fastq_path+ wildcards.sample +'_2.fastq.gz'
        data_hsap['sequence_files']['file2']['base_definition'][0] = 'cDNA(1-62)'
        data_hsap['num_threads'] = 8
        #data_hsap['make_stats'] = "yes"
        #data_hsap['which_Stage'] = 'Counting'
        data_hsap['barcodes']['barcode_file'] = bc_list2
        #data_hsap['barcodes']['barcode_num'] = 'null'
        data_hsap['reference']['STAR_index'] = '/project/devel/alafzi/ref_genomes/human/STARgenome'
        data_hsap['reference']['GTF_file'] = '/project/devel/alafzi/ref_genomes/human/hsa_gencode.v28.annotation.gtf'
        data_hsap['reference']['additional_STAR_params'] = '--limitOutSJcollapsed 4000000 --limitSjdbInsertNsj 4000000'
        data_hsap['out_dir'] = "/project/devel/alafzi/SC_Protocols/Version3/multigenome_QUARTZseq_DS_YAML/"+wildcards.sample+"_human"
        with open(output.yamlOut_hsap, 'w') as out_hsap:
            yaml.dump(data_hsap, out_hsap, default_flow_style=False)
        data_DS = data_hsap
        data_DS['which_Stage'] = 'Counting'
        data_DS['counting_opts']['downsampling'] = 20000,5000,10000,15000
        with open(output.yamlOut_DS, 'w') as out_DS:
            yaml.dump(data_DS, out_DS, default_flow_style=False)


rule fix_yaml:
    input: 
        yamlin_hsap= "YAMLs/"+protocol+"_hsap_{sample}.yaml",
        yamlin_DS= "YAMLs/"+protocol+"_DS_{sample}.yaml"
    output:
        yamlOutFix_hsap="YAMLs_fixed/"+protocol+"_hsap_{sample}_fixed.yaml",
        yamlOutFix_DS="YAMLs_fixed/"+protocol+"_DS_{sample}_fixed.yaml"
    shell:
        """
       sed 's/make_stats: true/make_stats: yes/g' {input.yamlin_hsap} > {output.yamlOutFix_hsap}
       sed 's/make_stats: true/make_stats: yes/g' {input.yamlin_DS} > {output.yamlOutFix_DS}
       """
       

rule zUMI_run:
    input:
        yaml_hsap="YAMLs_fixed/"+protocol+"_hsap_{sample}_fixed.yaml",
        yaml_DS="YAMLs_fixed/"+protocol + "_DS_{sample}_fixed.yaml"

    output:
        dir='multigenome_QUARTZseq_DS_YAML/{sample}_human/'+protocol+'.aligned.sorted.bam',
        dir_file11='multigenome_QUARTZseq_DS_YAML/{sample}_human/zUMIs_output/'+protocol+'.barcodelist.filtered.sort.sam',
        dir_exp='multigenome_QUARTZseq_DS_YAML/{sample}_human/zUMIs_output_downsampled/expression/'+protocol+'.dgecounts.rds'

        

    shell:
        """
        cd multigenome_QUARTZseq_DS_YAML/{wildcards.sample}_human
        rm -r zUMIs_output_downsampled
        bash {zUMI_path}/zUMIs-master.sh -y ../../{input.yaml_hsap}
        mv zUMIs_output zUMIs_output_main
        bash {zUMI_path}/zUMIs-master.sh -y ../../{input.yaml_DS}
        mv zUMIs_output zUMIs_output_downsampled
        cd ../..
       """
 
        
# So far by zUMI_run rule, we would have STAR alignment bam files, as well as quantifications and everything!
# For the next step we want to demultiplex bam files of the mixed species

# This rule combines the aligned.sorted.bam with the barcode information from hca04.barcodelist.filtered.sort.sam ! Basically, I split the barcode sequence into tags that get added to the aligned bam file.
#So for each protocol I will need to adjust the ranges 
rule prepare_R_inputs:
    input:
        hsap_Exprs= expand('multigenome_QUARTZseq_DS_YAML/{sample}_human/zUMIs_output_downsampled/expression/'+protocol+'.dgecounts.rds',sample=SAMPLES)
    
    output:
        hsapExp_list="multigenome_QUARTZseq_DS_YAML/"+protocol+'_Hsap_expression_DS_list.txt',
        #vcfs_list="multigenome_QUARTZseq_DS_YAML/"+protocol+'_VCFs_list.txt'

    shell:
        """
        echo -e "{input.hsap_Exprs}" >> {output.hsapExp_list}
        """
rule R_wrapper:
    input:
        hE_list="multigenome_QUARTZseq_DS_YAML/"+protocol+"_Hsap_expression_DS_list.txt"
    output:
        hsap_Robj= "multigenome_QUARTZseq_DS_YAML/"+protocol+".hsap.full.SCE.jointDSmat.Robj"
    shell:
        "Rscript wrapper_Downsampled_Robj.R --hsapExp {input.hE_list} --output_SCEobj ./multigenome_QUARTZseq_DS_YAML --technology QUARTZseq"